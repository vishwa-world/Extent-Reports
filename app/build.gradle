/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use TestNG framework, also requires calling test.useTestNG() below
    testImplementation 'org.testng:testng:7.4.0'

    implementation 'org.seleniumhq.selenium:selenium-java:3.141.59'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'
    implementation 'org.apache.commons:commons-io:1.3.2'
    // https://mvnrepository.com/artifact/org.apache.poi/poi
    implementation group: 'org.apache.poi', name: 'poi-ooxml', version: '3.9'

    // TODO - Add extent reports dependency
}

application {
    // Define the main class for the application.
    mainClass = 'extentReports.App'
}

tasks.named('test') {
    // Use TestNG for unit tests.
    useTestNG()

    afterSuite { desc, result ->
            if (!desc.parent) {
                println "\nTEST RESULT: ${result.resultType}"
                println "TEST SUMMARY: RAN ${result.testCount} TESTS, " +
                        "${result.successfulTestCount} SUCCEEDED, " +
                        "${result.failedTestCount} FAILED, " +
                        "${result.skippedTestCount} SKIPPED"
            }
    }

    testLogging {
		events "PASSED", "SKIPPED", "FAILED", "STANDARD_OUT", "STANDARD_ERROR"
        exceptionFormat = 'full'

        // Optionally do:
        showStackTraces = true
	}

    testLogging.showStandardStreams = true
    test.outputs.upToDateWhen {false}

}

// Additional config for Crio workspace
buildDir = '/tmp/external_build'

task startScript(type:Exec) {
    commandLine '../selenium-run.sh'
}

run.dependsOn startScript

test.dependsOn startScript
